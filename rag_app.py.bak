from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from langchain_openai import ChatOpenAI
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_postgres import PGVector
from langchain.prompts import PromptTemplate
from langchain_core.documents import Document
import os
import logging
import psycopg2

# 로깅 설정
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = FastAPI()

# 환경 변수
DB_USER = os.getenv("DB_USER", "jjj")
DB_PASSWORD = os.getenv("DB_PASSWORD", "1q2w3e4r!")
DB_HOST = os.getenv("DB_HOST", "db")
DB_NAME = os.getenv("DB_NAME", "meong")
# SQLAlchemy용 DSN
CONNECTION_STRING = f"postgresql+psycopg2://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:5432/{DB_NAME}"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

# 임베딩 모델
try:
    embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
    logger.info("HuggingFaceEmbeddings initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize HuggingFaceEmbeddings: {e}")
    raise HTTPException(status_code=500, detail="Embedding initialization failed")

# PGVector 초기화
try:
    vectorstore = PGVector(
        connection=CONNECTION_STRING,
        embeddings=embeddings,
        collection_name="chatbot_vectors",
        distance_strategy="cosine",
        use_jsonb=True
    )
    logger.info("PGVector initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize PGVector: {e}")
    raise HTTPException(status_code=500, detail="Vectorstore initialization failed")

# 샘플 데이터 삽입
def initialize_vectorstore():
    try:
        logger.debug("Starting initialize_vectorstore")
        logger.info("Checking for existing data in chatbot_vectors")
        existing_docs = vectorstore.similarity_search("강아지 입양", k=1)
        logger.debug(f"Existing docs: {existing_docs}")

        # 기존 데이터 확인 및 삭제
        with psycopg2.connect(
            host=DB_HOST,
            port=5432,
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        ) as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT COUNT(*) 
                    FROM langchain_pg_embedding e 
                    JOIN langchain_pg_collection c ON e.collection_id = c.uuid 
                    WHERE c.name = %s
                """, ("chatbot_vectors",))
                count = cur.fetchone()[0]
                logger.debug(f"Existing records in chatbot_vectors: {count}")

                if count > 0:
                    logger.info("Deleting existing data in chatbot_vectors")
                    cur.execute("""
                        DELETE FROM langchain_pg_embedding 
                        WHERE collection_id = (
                            SELECT uuid FROM langchain_pg_collection WHERE name = %s
                        )
                    """, ("chatbot_vectors",))
                    conn.commit()
                    logger.info("Existing data deleted")

        # 샘플 데이터 삽입
        logger.info("Inserting sample data into chatbot_vectors")
        sample_docs = [
            Document(
                page_content="강아지 입양 절차는 동물보호소 방문, 신분증 제출, 입양 신청서 작성, 면담, 입양비 납부 순으로 진행됩니다.",
                metadata={"source": "adoption_guide"}
            ),
            Document(
                page_content="고양이 입양 시 고려해야 할 점은 집 환경, 사료 선택, 건강 검진 주기입니다.",
                metadata={"source": "cat_adoption"}
            ),
            Document(
                page_content="애완동물 건강 관리를 위해 정기적인 예방접종과 구충제 투여가 중요합니다.",
                metadata={"source": "pet_care"}
            )
        ]
        vectorstore.add_documents(sample_docs)
        logger.info("Sample data inserted successfully")
    except Exception as e:
        logger.error(f"Failed to insert sample data: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Sample data insertion failed: {str(e)}")

# OpenAI 모델
try:
    llm = ChatOpenAI(
        api_key=OPENAI_API_KEY,
        model=OPENAI_MODEL
    )
    logger.info("ChatOpenAI initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize ChatOpenAI: {e}")
    raise HTTPException(status_code=500, detail="LLM initialization failed")

# 프롬프트 템플릿
prompt_template = PromptTemplate(
    input_variables=["context", "query"],
    template="""You are 멍토리 도우미, a chatbot for a pet All-in-One platform. 
    Answer in Korean, using a friendly tone. 
    Context: {context}
    Question: {query}
    Answer:"""
)

class QueryRequest(BaseModel):
    query: str

@app.post("/rag")
async def rag_endpoint(request: QueryRequest):
    try:
        logger.info(f"Processing query: {request.query}")
        results = vectorstore.similarity_search(request.query, k=5)
        context = "\n".join([doc.page_content for doc in results])
        prompt = prompt_template.format(context=context, query=request.query)
        response = llm.invoke(prompt)
        logger.info("Query processed successfully")
        return {"answer": response.content}
    except Exception as e:
        logger.error(f"Error processing query: {e}")
        raise HTTPException(status_code=500, detail="Query processing failed")

# 서버 시작 시 vectorstore 초기화
initialize_vectorstore()