# AWS 인스턴스 배포 자동화 워크플로우
# 
# 실행 방법:
# 1. 수동 실행: GitHub Actions에서 "Run workflow"로 실행 시 IP 주소 입력
# 2. 자동 실행: main 브랜치에 push/merge 시 자동 배포 (TEST_INSTANCE_IP secret 필요)
# 3. 테스트 실행: feature/cd 브랜치에 push 시 테스트용 자동 실행

name: CD Pipeline

on:
  # 수동 실행 (IP 주소 입력)
  workflow_dispatch:
    inputs:
      instance_ip:
        description: 'AWS Instance Public IP Address (예: 13.124.123.45)'
        required: true
        type: string
  
  # main 브랜치에 push 시 자동 배포
  push:
    branches:
      - main
  
  # main 브랜치로 PR이 merge될 때 자동 배포
  pull_request:
    branches:
      - main
    types:
      - closed

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    # PR이 merged된 경우나 직접 push된 경우에만 실행
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    env:
      # push 이벤트일 때는 GitHub Secrets의 테스트 IP 사용, workflow_dispatch일 때는 입력받은 IP 사용
      INSTANCE_IP: ${{ github.event.inputs.instance_ip || secrets.TEST_INSTANCE_IP }}
    
    steps:
    # 소스 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}

    # AWS 인증 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # 기존 ECR 이미지 삭제 (용량 절약)
    - name: Delete existing ECR images (if any)
      run: |
        echo "Deleting existing images..."
        aws ecr batch-delete-image --repository-name mt-frontend --image-ids imageTag=latest --region ${{ secrets.AWS_REGION }} || true
        aws ecr batch-delete-image --repository-name mt-backend --image-ids imageTag=latest --region ${{ secrets.AWS_REGION }} || true
        aws ecr batch-delete-image --repository-name mt-ai --image-ids imageTag=latest --region ${{ secrets.AWS_REGION }} || true
        aws ecr batch-delete-image --repository-name mt-db --image-ids imageTag=latest --region ${{ secrets.AWS_REGION }} || true

    # 프론트엔드 이미지 빌드 및 푸시 (인스턴스 IP 주입)
    - name: Build and push Frontend image
      run: |
        echo "Building Frontend with instance IP: ${{ env.INSTANCE_IP }}"
        docker build \
          --build-arg NEXT_PUBLIC_BACKEND_URL=http://${{ env.INSTANCE_IP }}:8080 \
          -t ${{ secrets.ECR_REGISTRY }}/mt-frontend:latest \
          ./frontend
        docker push ${{ secrets.ECR_REGISTRY }}/mt-frontend:latest

    # 백엔드 이미지 빌드 및 푸시
    - name: Build and push Backend image
      run: |
        echo "Building Backend..."
        docker build -t ${{ secrets.ECR_REGISTRY }}/mt-backend:latest ./backend
        docker push ${{ secrets.ECR_REGISTRY }}/mt-backend:latest

    # AI 서비스 이미지 빌드 및 푸시
    - name: Build and push AI image
      run: |
        echo "Building AI service..."
        docker build -t ${{ secrets.ECR_REGISTRY }}/mt-ai:latest ./ai
        docker push ${{ secrets.ECR_REGISTRY }}/mt-ai:latest

    # 데이터베이스 이미지 빌드 및 푸시
    - name: Build and push DB image
      run: |
        echo "Building Database..."
        docker build -t ${{ secrets.ECR_REGISTRY }}/mt-db:latest ./db
        docker push ${{ secrets.ECR_REGISTRY }}/mt-db:latest

    # docker-compose.production.yml에 환경변수 주입
    - name: Configure docker-compose with secrets
      run: |
        # GitHub Secrets을 사용하여 환경변수 치환
        # Frontend 환경변수
        sed -i "s|\${NEXT_PUBLIC_BACKEND_URL}|http://${{ env.INSTANCE_IP }}:8080|g" docker-compose.production.yml
        
        # Backend 환경변수  
        sed -i "s|\${BACKEND_PORT}|${{ secrets.BACKEND_PORT }}|g" docker-compose.production.yml
        sed -i "s|\${DB_NAME}|${{ secrets.DB_NAME }}|g" docker-compose.production.yml
        sed -i "s|\${DB_USER}|${{ secrets.DB_USER }}|g" docker-compose.production.yml
        sed -i "s|\${DB_PASSWORD}|${{ secrets.DB_PASSWORD }}|g" docker-compose.production.yml
        sed -i "s|\${JWT_SECRET_KEY}|${{ secrets.JWT_SECRET_KEY }}|g" docker-compose.production.yml
        sed -i "s|\${GOOGLE_CLIENT_ID}|${{ secrets.GOOGLE_CLIENT_ID }}|g" docker-compose.production.yml
        sed -i "s|\${GOOGLE_CLIENT_SECRET}|${{ secrets.GOOGLE_CLIENT_SECRET }}|g" docker-compose.production.yml
        sed -i "s|\${KAKAO_CLIENT_ID}|${{ secrets.KAKAO_CLIENT_ID }}|g" docker-compose.production.yml
        sed -i "s|\${KAKAO_CLIENT_SECRET}|${{ secrets.KAKAO_CLIENT_SECRET }}|g" docker-compose.production.yml
        sed -i "s|\${NAVER_CLIENT_ID}|${{ secrets.NAVER_CLIENT_ID }}|g" docker-compose.production.yml
        sed -i "s|\${NAVER_CLIENT_SECRET}|${{ secrets.NAVER_CLIENT_SECRET }}|g" docker-compose.production.yml
        sed -i "s|\${AWS_ACCESS_KEY_ID}|${{ secrets.AWS_ACCESS_KEY_ID }}|g" docker-compose.production.yml
        sed -i "s|\${AWS_SECRET_ACCESS_KEY}|${{ secrets.AWS_SECRET_ACCESS_KEY }}|g" docker-compose.production.yml
        sed -i "s|\${AWS_S3_REGION}|${{ secrets.AWS_S3_REGION }}|g" docker-compose.production.yml
        sed -i "s|\${AWS_S3_BUCKET_NAME}|${{ secrets.AWS_S3_BUCKET_NAME }}|g" docker-compose.production.yml
        sed -i "s|\${AI_SERVICE_URL}|${{ secrets.AI_SERVICE_URL }}|g" docker-compose.production.yml
        sed -i "s|\${TOSS_SECRET_KEY}|${{ secrets.TOSS_SECRET_KEY }}|g" docker-compose.production.yml
        sed -i "s|\${TOSS_CLIENT_KEY}|${{ secrets.TOSS_CLIENT_KEY }}|g" docker-compose.production.yml
        
        # AI 서비스 환경변수
        sed -i "s|\${DB_PORT}|${{ secrets.DB_PORT }}|g" docker-compose.production.yml
        sed -i "s|\${OPENAI_API_KEY}|${{ secrets.OPENAI_API_KEY }}|g" docker-compose.production.yml
        sed -i "s|\${OPENAI_MODEL}|${{ secrets.OPENAI_MODEL }}|g" docker-compose.production.yml
        sed -i "s|\${OPENAI_IMAGE_MODEL}|${{ secrets.OPENAI_IMAGE_MODEL }}|g" docker-compose.production.yml
        sed -i "s|\${OPENAI_BREEDING_MODEL}|${{ secrets.OPENAI_BREEDING_MODEL }}|g" docker-compose.production.yml
        sed -i "s|\${EMBEDDING_MODEL_NAME}|${{ secrets.EMBEDDING_MODEL_NAME }}|g" docker-compose.production.yml
        sed -i "s|\${VECTORSTORE_COLLECTION_NAME}|${{ secrets.VECTORSTORE_COLLECTION_NAME }}|g" docker-compose.production.yml
        sed -i "s|\${VECTORSTORE_DISTANCE_STRATEGY}|${{ secrets.VECTORSTORE_DISTANCE_STRATEGY }}|g" docker-compose.production.yml
        sed -i "s|\${VECTORSTORE_SEARCH_LIMIT}|${{ secrets.VECTORSTORE_SEARCH_LIMIT }}|g" docker-compose.production.yml
        sed -i "s|\${SAMPLE_DATA_PATH}|${{ secrets.SAMPLE_DATA_PATH }}|g" docker-compose.production.yml
        sed -i "s|\${PROMPT_TEMPLATE_PATH}|${{ secrets.PROMPT_TEMPLATE_PATH }}|g" docker-compose.production.yml
        
        echo "Configured docker-compose.production.yml with environment variables"
        echo "Final docker-compose configuration:"
        cat docker-compose.production.yml

    # 인스턴스 정리 작업 (기존 컨테이너 중지 및 파일 삭제)
    - name: Clean up instance
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.INSTANCE_IP }}
        username: ubuntu
        key: ${{ secrets.AWS_PEM_KEY }}
        script: |
          echo "Starting cleanup..."
          
          # Stop existing containers
          if [ -f docker-compose.yml ]; then
            echo "Stopping existing containers..."
            docker-compose down || true
          fi
          
          # Clean up old files
          rm -rf docker-compose.yml init-db/
          
          # Clean up Docker resources
          echo "Cleaning up Docker resources..."
          docker system prune -f || true

    # 배포 파일 인스턴스로 전송
    - name: Copy files to instance
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ env.INSTANCE_IP }}
        username: ubuntu
        key: ${{ secrets.AWS_PEM_KEY }}
        source: "docker-compose.production.yml,db/init-db"
        target: "/home/ubuntu/"

    # docker-compose.production.yml을 docker-compose.yml로 이름 변경
    - name: Rename docker-compose file and start services
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.INSTANCE_IP }}
        username: ubuntu
        key: ${{ secrets.AWS_PEM_KEY }}
        script: |
          echo "Renaming docker-compose file..."
          mv docker-compose.production.yml docker-compose.yml

    # 인스턴스에서 서비스 시작
    - name: Start services on instance
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.INSTANCE_IP }}
        username: ubuntu
        key: ${{ secrets.AWS_PEM_KEY }}
        script: |
          echo "Starting services..."
          
          # Configure AWS CLI for ECR access
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}
          
          # Login to ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          
          # Pull latest images
          echo "Pulling latest images..."
          docker pull ${{ secrets.ECR_REGISTRY }}/mt-frontend:latest
          docker pull ${{ secrets.ECR_REGISTRY }}/mt-backend:latest
          docker pull ${{ secrets.ECR_REGISTRY }}/mt-ai:latest
          docker pull ${{ secrets.ECR_REGISTRY }}/mt-db:latest
          
          # Start services
          echo "Starting services with docker-compose..."
          docker-compose up -d
          
          # Show running containers
          echo "Deployment completed. Running containers:"
          docker ps

    # 배포 완료 상태 출력
    - name: Deployment Status
      run: |
        echo "Deployment completed successfully!"
        echo "Frontend: http://${{ env.INSTANCE_IP }}:3000"
        echo "Backend: http://${{ env.INSTANCE_IP }}:8080"
        echo "AI Service: http://${{ env.INSTANCE_IP }}:9000"
        echo "Database: ${{ env.INSTANCE_IP }}:5432"