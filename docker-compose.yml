services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        BUILD_ENV: dev
        NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
    depends_on:
      - backend
    networks:
      - meongtory-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SERVER_PORT=${BACKEND_PORT}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}
      - NAVER_CLIENT_ID=${NAVER_CLIENT_ID}
      - NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - AI_SERVICE_URL=${AI_SERVICE_URL}
      - TOSS_SECRET_KEY=${TOSS_SECRET_KEY}
      - NEXT_PUBLIC_TOSS_CLIENT_KEY=${TOSS_CLIENT_KEY}
    depends_on:
      - db
      - ai
    networks:
      - meongtory-network

  ai:
    build:
      context: ./ai
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - OPENAI_IMAGE_MODEL=${OPENAI_IMAGE_MODEL}
      - OPENAI_BREEDING_MODEL=${OPENAI_BREEDING_MODEL}
      - AI_SERVICE_URL=${AI_SERVICE_URL}
      - EMBEDDING_MODEL_NAME=${EMBEDDING_MODEL_NAME}
      - VECTORSTORE_COLLECTION_NAME=${VECTORSTORE_COLLECTION_NAME}
      - VECTORSTORE_DISTANCE_STRATEGY=${VECTORSTORE_DISTANCE_STRATEGY}
      - VECTORSTORE_SEARCH_LIMIT=${VECTORSTORE_SEARCH_LIMIT}
      - SAMPLE_DATA_PATH=${SAMPLE_DATA_PATH}
      - PROMPT_TEMPLATE_PATH=${PROMPT_TEMPLATE_PATH}
    volumes:
      - ./ai:/app
      - ./ai/chatBot:/app/chatBot
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "9000", "--reload"]
    depends_on:
      - db
    networks:
      - meongtory-network

  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - NEXT_PUBLIC_TOSS_CLIENT_KEY=${TOSS_CLIENT_KEY}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init-db:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - meongtory-network
    command: |
      bash -c "
        docker-entrypoint.sh postgres &
        sleep 10
        cp /docker-entrypoint-initdb.d/pg_hba.conf /var/lib/postgresql/data/pg_hba.conf
        chmod 600 /var/lib/postgresql/data/pg_hba.conf
        chown postgres:postgres /var/lib/postgresql/data/pg_hba.conf
        pg_ctl reload -D /var/lib/postgresql/data
        wait
      "

volumes:
  postgres_data:

networks:
  meongtory-network:
    driver: bridge
